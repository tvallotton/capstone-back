// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int           @id @default(autoincrement())
    email       String        @unique
    password    String
    name        String        @default("")
    LastName    String        @default("")
    adress      String        @default("")
    city        String        @default("")
    BornDate    String        @default("")
    occuppancy  String        @default("")
    isAdmin     Boolean       @default(false)
    isStaff     Boolean       @default(false)
    createdAt   DateTime      @default(now())
    submissions Submission[]
    bookings    Booking[]
    history     UserHistory[]
}

model Bicycle {
    id        Int              @id @default(autoincrement())
    qrCode    String           @unique
    status    BicycleStatus
    model     BicycleModel     @relation(fields: [modelId], references: [id])
    modelId   Int
    bookings  Booking[]
    history   BicycleHistory[]
    ulock     String           @default("")
    lights    String           @default("")
    fleet     String           @default("")
    reflector String           @default("")
}

model BicycleModel {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    description String
    // el número de bicicletas reservadas para este modelo
    image       String?
    bicycles    Bicycle[]
    Submission  Submission[]
}

model Submission {
    id             Int          @id @default(autoincrement())
    user           User         @relation(fields: [userId], references: [id])
    model          BicycleModel @relation(fields: [bicycleModelId], references: [id])
    userId         Int          @unique
    bicycleModelId Int
    createdAt      DateTime     @default(now())
}

// Porque el bicycleid no es unique??
model Booking {
    id        Int       @id @default(autoincrement())
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    bicycle   Bicycle   @relation(fields: [bicycleId], references: [id])
    bicycleId Int
    start     DateTime  @default(now())
    end       DateTime?
}

model BicycleHistory {
    id          Int      @id @default(autoincrement())
    bicycle     Bicycle  @relation(fields: [bicycleId], references: [id], onDelete: Cascade)
    bicycleId   Int
    description String
    createdAt   DateTime @default(now())
}

model UserHistory {
    id          Int      @id @default(autoincrement())
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    description String
    createdAt   DateTime @default(now())
}

enum BicycleStatus {
    // ARRENDADA
    HABILITADA // puede estar disponible o arrendada. 
    EVENTO // reservada para evento
    REPARACION // no está prestada pero está averiada
    INHABILITADA // se considera perdida/destruida
}
