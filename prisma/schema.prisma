// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             Int              @id @default(autoincrement())
    email          String           @unique
    password       String
    name           String           @default("")
    lastName       String           @default("")
    address        String           @default("")
    city           String           @default("")
    birthday       DateTime?
    occuppancy     String           @default("")
    isAdmin        Boolean          @default(false)
    isStaff        Boolean          @default(false)
    createdAt      DateTime         @default(now())
    isValidated    Boolean          @default(false)
    submissions    Submission[]
    bookings       Booking[]
    history        UserHistory[]
    BicycleHistory BicycleHistory[]
}

model Bicycle {
    id       Int              @id @default(autoincrement())
    qrCode   String           @unique
    status   BicycleStatus
    model    BicycleModel     @relation(fields: [modelId], references: [id])
    modelId  Int
    bookings Booking[]
    history  BicycleHistory[]
    fleet    String           @default("")
}

model BicycleModel {
    id          Int          @id @default(autoincrement())
    name        String       @unique
    description String
    image       String?
    bicycles    Bicycle[]
    submissions Submission[]
}

model Submission {
    id             Int          @id @default(autoincrement())
    user           User         @relation(fields: [userId], references: [id])
    model          BicycleModel @relation(fields: [bicycleModelId], references: [id])
    userId         Int          @unique
    bicycleModelId Int
    createdAt      DateTime     @default(now())
}

model Booking {
    id        Int       @id @default(autoincrement())
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    bicycle   Bicycle   @relation(fields: [bicycleId], references: [id])
    bicycleId Int
    start     DateTime  @default(now())
    end       DateTime?
    ulock     Int       @default(1)
    lights    Int       @default(1)
    reflector Int       @default(1)
}

model BicycleHistory {
    id          Int      @id @default(autoincrement())
    bicycle     Bicycle  @relation(fields: [bicycleId], references: [id], onDelete: Cascade)
    bicycleId   Int
    description String
    createdAt   DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    userId      Int
}

model UserHistory {
    id          Int      @id @default(autoincrement())
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      Int
    description String
    createdAt   DateTime @default(now())
}

enum BicycleStatus {
    // ARRENDADA
    HABILITADA // puede estar disponible o arrendada. 
    EVENTO // reservada para evento
    REPARACION // no está prestada pero está averiada
    INHABILITADA // se considera perdida/destruida
}
